<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    mapper:映射文件的根目录
        namespace：命名空间，用于隔离sql ，类似java中包作用，区分不同的SQL语句

-->

<mapper namespace="com.itheima.FindUserTest">
    <!--mapper动态代理的规则：
    1.namespace值为接口的完全路径名
    2.SQL语句中的id值为接口中的方法名
    3.SQL语句中的返回值与方法中的返回值一致（List<user> 与泛型类型一致）
    4.SQL的参数类型和方法中参数类型一致
    -->
<!--根据id查询-->
<select id="findUserById" resultType="user" parameterType="java.lang.Integer">
    select * from user where uid =#{id}
</select>

<!--
    &lt;!&ndash;模糊查询的第一种方式&ndash;&gt;
    <select id="findUserByName" resultType="com.itheima.user.User" parameterType="java.lang.String">
        select * from user where name like #{name}
    </select>
-->

    <!--模糊查询的第二种方式
                    传递参数： #{} ongl表达式的方式 采用的是预处理的方式,解决SQL注入的问题
                    修改字符串拼接的方式：
                                     ${value}   如果是基本数据类型和String类型  只能给value
    -->
    <select id="findUserByName" resultType="user" parameterType="java.lang.String">
        select * from user where name like '%${value}%'
    </select>

    <!--
    添加用户：参数传递的是基本数据类型  #{随意}
               参数传递的是 pojo类型    #{属性名}
                private int uid;
    private String name;
    private String sex;
    private int age;
    private String adress;
    private String qq;
    private String eameil;
    -->
    <insert id="insertUser" parameterType="user">
        <!--insert into user values(#{uid} ,#{name},#{sex},#{age},#{adress},#{qq},#{eameil});-->
        insert into user values(#{uid},#{name},#{sex},#{age},#{adress},#{qq},#{eameil});
    </insert>
      <!--
      添加用户后获取自动增长的id
                keyProperty；查询到的属性设置到user的那个属性上
                keyColumn:查询数据库的哪个列
                resultType:数据的返回的结果类型
                order:insert语句执行之前执行还是之后执行  该查询：AFTER BEFOER

      -->


    
    
    <!--更新用户操作-->
    <update id="updateUser" parameterType="user">
        update user set name = #{name} ,sex = #{sex},age = #{age} where uid =#{uid};
    </update>

    <!--删除一条用户数据-->
    <delete id="deleteUserById" parameterType="java.lang.Integer">
        delete from user where uid = #{id};
    </delete>


    <!--
    sql片段
    -->
    <sql id="userFiled">
       uid,name,sex,age,adress,qq,eameil
    </sql>
    <!--//根据name和sex查询
    //如果name没传递，只根据sex查询；如果sex没传递，
    只根据name查询；如果name和sex都没传，全查询
    -->

<!--   <select id="findUserByNameAndSex" resultType="com.itheima.User" >

        select <include refid="userFiled"/> from user
        where 1=1
        <if test="username != null and username != '' ">
            and name like '%${username}%'
        </if>
       <if test="sex != null and sex != ''">
           and sex = #{sex}
       </if>
    </select>-->
    <!--
    <where>标签两个作用：1.可以代替where关键字；2.可以去除第一个and关键字
    -->

    <select id="findUserByNameAndSex" resultType="user" >

        select <include refid="userFiled"/> from user
        <where>
            <if test="username != null and username != '' ">
                and name like '%${username}%'
            </if>
            <if test="sex != null and sex != ''">
                and sex = #{sex}
            </if>

        </where>

    </select>
    <select id="findUserByAllId" resultType="user">
       <!-- select <include refid="userFiled"/> from user where uid in (5,4,3)-->
        select <include refid="userFiled"/> from user
        <where>
            <foreach collection="list" open="uid in(" close=")" item="id" separator=",">
                #{id}
            </foreach>

        </where>
    </select>
    <select id="queryOrderAndUser" resultType="Order">

               select
                o.`id`,
                o.`number`,
                o.`user_id`,
                o.`createtime`,
                o.`note`,
                u.`username`,
                u.`birthday`,
                u.`sex`,
                u.`address`
                 from `order` o
                 left join user u
                 on o.`user_id` = u.`id`

    </select>

</mapper>